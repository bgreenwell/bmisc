mat <- function(x, ...) {
UseMethod("mat")
}
mat.default <- function(x, ..., rows = TRUE) {
print("Default")
}
##' @rdname mat
##' @export
##' @method mat character
mat.character <- function(x) {
## Gather rows and individual values
char_rows <- unlist(strsplit(x, split = ";"))
values <- unname(unlist(sapply(char_rows, strsplit, split = ",")))
## Form matrix from parsed values by calling R's built-in matrix function
matrix(sapply(values, function(x) eval(parse(text = x))),
nrow = length(char_rows), byrow = TRUE)
}
##' @rdname mat
##' @export
##' @method mat list
mat.list <- function(x, rows = TRUE) {
## Check element types
if (!all(sapply(x, class) %in% c("numeric", "integer"))) {
stop("Each element must be of type 'numeric' or 'integer'.", call. = FALSE)
}
## Check length of each element
if (!all(sapply(x, length) >= 1) && length(unique(sapply(x, length))) != 1) {
stop("Each element must contain at least one value.", call. = FALSE)
}
## Form matrix by combining elements
if (rows) do.call(rbind, x) else do.call(cbind, x)
}
mat(1:3)
args
mat.default <- function(..., rows = TRUE) {
arg_list <- c(as.list(environment()), list(...))
arg_list
}
mat(1:3)
mat(1:3, 1:10)
mat.default <- function(..., rows = TRUE) {
arg_list <- list(...)
arg_list
}
mat(1:3, 1:10)
##' @rdname mat
##' @export
##' @method mat default
mat.default <- function(..., rows = TRUE) {
mat.list(list(...), rows = rows)
}
x <- 1:3; y <- 4:6; z <- 7:9
mat(x, y, z)
mat(x, y, z, rows = F)
mat(x, y, z, 1:4)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
corr
?match.arg
?R2
?caret::R2
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list = ls())
devtools::load_all(".")
devtools::load_all(".")
install.packages(c("AICcmodavg", "BB", "BH", "C50", "car", "caret", "catdata", "deldir", "DEoptimR", "deSolve", "diptest", "doBy", "Ecfun", "emdbook", "entropy", "fdrtool", "GPArotation", "grpreg", "gWidgetsRGtk2", "highr", "httpuv", "jsonlite", "knitr", "lava", "magrittr", "mvtnorm", "party", "plotmo", "plotrix", "R6", "Rcpp11", "RcppArmadillo", "RCurl", "rFerns", "rjags", "rminer", "rpart.plot", "RSQLite", "sda", "setRNG", "sp", "texreg", "VGAM", "VGAMdata"))
install.packages("rticles")
library(devtools)
install_github("rstudio/rticles")
## Color wheel function
colorWheel <- function(str, cex = 0.75) {
cols <- colors()[grep(str, colors())]
pie(rep(1, length(cols)), labels = cols, col = cols, cex = cex)
cols
}
colorWheel("blue")
## Packages
library(dplyr)
library(mgcv)
library(ggplot2)
library(randomForest)
## Data
path_to_file <- "/home/w108bmg/Desktop/Kaggle/Bike Sharing Demand"
train <- as.tbl(read.csv(paste(path_to_file, "train.csv", sep = "/"), header = TRUE))
test <- as.tbl(read.csv(paste(path_to_file, "test.csv", sep = "/"), header = TRUE))
## Convert to factors
train$season <- as.factor(train$season)
train$holiday <- as.factor(train$holiday)
train$workingday <- as.factor(train$workingday)
train$weather <- as.factor(train$weather)
rfFit <- randomForest(count ~ ., data = subset(train, select = -datetime))
varImpPlot(rfFit)
rfFit
library(caret)
train
plot(count ~ registered, data = train)
## Data
path <- "/home/w108bmg/Desktop/Kaggle/Bike Sharing Demand"
train <- as.tbl(read.csv(paste(path, "train.csv", sep = "/"), header = TRUE))
test <- as.tbl(read.csv(paste(path, "test.csv", sep = "/"), header = TRUE))
## Convert to factors
train$season <- as.factor(train$season)
train$holiday <- as.factor(train$holiday)
train$workingday <- as.factor(train$workingday)
train$weather <- as.factor(train$weather)
test$season <- as.factor(test$season)
test$holiday <- as.factor(test$holiday)
test$workingday <- as.factor(test$workingday)
test$weather <- as.factor(test$weather)
?randomForest
set.seed(101)
rfFit <- randomForest(x = subset(train, select = -c(datetimem count)),
y = train$count,
xtest = subset(train, select = -c(datetimem count)),
ytest = test$count)
set.seed(101)
rfFit <- randomForest(x = subset(train, select = -c(datetimem, count)),
y = train$count,
xtest = subset(train, select = -c(datetimem, count)),
ytest = test$count)
test
## Random forest
set.seed(101)
rfFit <- randomForest(x = subset(train, select = -c(datetime, count)),
y = train$count,
xtest = subset(train, select = -c(datetime, count)),
ytest = test$count)
rfFit
names(rfFit)
names(rfFit$test)
rfFit$test$rsq
rfFit$test[, "rsq"]
rfFit$test
names(rfFit$test)
library(ggplot2)
library(lubridate)
library(randomForest)
set.seed(1)
path <- "/home/w108bmg/Desktop/Kaggle/Bike Sharing Demand"
train <- as.tbl(read.csv(paste(path, "train.csv", sep = "/"), header = TRUE))
test <- as.tbl(read.csv(paste(path, "test.csv", sep = "/"), header = TRUE))
library(randomForest)
extractFeatures <- function(data) {
features <- c("season",
"holiday",
"workingday",
"weather",
"temp",
"atemp",
"humidity",
"windspeed",
"hour")
data$hour <- hour(ymd_hms(data$datetime))
return(data[,features])
}
trainFea <- extractFeatures(train)
testFea  <- extractFeatures(test)
submission <- data.frame(datetime=test$datetime, count=NA)
library(ggplot2)
library(lubridate)
library(randomForest)
set.seed(1)
path <- "/home/w108bmg/Desktop/Kaggle/Bike Sharing Demand"
train <- as.tbl(read.csv(paste(path, "train.csv", sep = "/"), header = TRUE))
test <- as.tbl(read.csv(paste(path, "test.csv", sep = "/"), header = TRUE))
library(randomForest)
extractFeatures <- function(data) {
features <- c("season",
"holiday",
"workingday",
"weather",
"temp",
"atemp",
"humidity",
"windspeed",
"hour")
data$hour <- hour(ymd_hms(data$datetime))
return(data[,features])
}
trainFea <- extractFeatures(train)
testFea  <- extractFeatures(test)
submission <- data.frame(datetime=test$datetime, count=NA)
unique(year(ymd_hms(test$datetime)))
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs   <- year(ymd_hms(test$datetime))==i_year & month(ymd_hms(test$datetime))==i_month
testSubset <- test[testLocs,]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(extractFeatures(train[trainLocs,]), train[trainLocs,"count"], ntree=100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
#
# Click "fork" to run this script yourself and make tweaks
library(ggplot2)
library(lubridate)
library(randomForest)
set.seed(1)
path <- "/home/w108bmg/Desktop/Kaggle/Bike Sharing Demand"
train <- as.tbl(read.csv(paste(path, "train.csv", sep = "/"), header = TRUE))
test <- as.tbl(read.csv(paste(path, "test.csv", sep = "/"), header = TRUE))
library(randomForest)
extractFeatures <- function(data) {
features <- c("season",
"holiday",
"workingday",
"weather",
"temp",
"atemp",
"humidity",
"windspeed",
"hour")
data$hour <- hour(ymd_hms(data$datetime))
return(data[,features])
}
trainFea <- extractFeatures(train)
testFea  <- extractFeatures(test)
submission <- data.frame(datetime=test$datetime, count=NA)
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs   <- year(ymd_hms(test$datetime))==i_year & month(ymd_hms(test$datetime))==i_month
testSubset <- test[testLocs,]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(extractFeatures(train[trainLocs,]), train[trainLocs,"count"], ntree=100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
testLocs
1==1 &
2 == 2
# Train a model across all the training data and plot the variable importance
rf <- randomForest(extractFeatures(train), train$count, ntree=100, importance=TRUE)
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
p
rf
?importance
# Plot random forest feature importance
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
# Train a model across all the training data and plot the variable importance
rf <- randomForest(x = extractFeatures(train),
y = train$count,
xtest = extractFeatures(test),
ytest = test$count,
ntree = 100, importance = TRUE)
# Extract feature importance scores
imp <- importance(rf, type = 1)
feature_importance <- data.frame(feature = row.names(imp),
importance = imp[, 1])
# Plot random forest feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
rf
rf$test
test$count
plot(rf)
# Train a model across all the training data and plot the variable importance
rf <- randomForest(x = extractFeatures(train), y = train$count, ntree = 500,
importance = TRUE)
plot(rf)
rf
# Plot feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
coord_flip() +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
# Plot feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
ylab("Importance") +
xlab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
test
head(train$hour)
unique(year(ymd_hms(test$datetime)))
unique(month(ymd_hms(test$datetime)))
testLocs
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs <- year(ymd_hms(test$datetime)) == i_year &
month(ymd_hms(test$datetime)) == i_month
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
i_year
i_month
extractFeatures(train[trainLocs, ])
train[trainLocs, "count"],
train[trainLocs, "count"]
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
train[trainLocs, ]$count
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs <- year(ymd_hms(test$datetime)) == i_year &
month(ymd_hms(test$datetime)) == i_month
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, ]$count, ntree = 100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
submission
submission %?% tbl_df
submission %>% tbl_df
ts.plot(submission)
ts.plot(submission$count)
ts.plot(submission$count[1:1000])
ts.plot(submission$count[1:100])
ts.plot(submission$count)
