mat <- function(x, ...) {
UseMethod("mat")
}
mat.default <- function(x, ..., rows = TRUE) {
print("Default")
}
##' @rdname mat
##' @export
##' @method mat character
mat.character <- function(x) {
## Gather rows and individual values
char_rows <- unlist(strsplit(x, split = ";"))
values <- unname(unlist(sapply(char_rows, strsplit, split = ",")))
## Form matrix from parsed values by calling R's built-in matrix function
matrix(sapply(values, function(x) eval(parse(text = x))),
nrow = length(char_rows), byrow = TRUE)
}
##' @rdname mat
##' @export
##' @method mat list
mat.list <- function(x, rows = TRUE) {
## Check element types
if (!all(sapply(x, class) %in% c("numeric", "integer"))) {
stop("Each element must be of type 'numeric' or 'integer'.", call. = FALSE)
}
## Check length of each element
if (!all(sapply(x, length) >= 1) && length(unique(sapply(x, length))) != 1) {
stop("Each element must contain at least one value.", call. = FALSE)
}
## Form matrix by combining elements
if (rows) do.call(rbind, x) else do.call(cbind, x)
}
mat(1:3)
args
mat.default <- function(..., rows = TRUE) {
arg_list <- c(as.list(environment()), list(...))
arg_list
}
mat(1:3)
mat(1:3, 1:10)
mat.default <- function(..., rows = TRUE) {
arg_list <- list(...)
arg_list
}
mat(1:3, 1:10)
##' @rdname mat
##' @export
##' @method mat default
mat.default <- function(..., rows = TRUE) {
mat.list(list(...), rows = rows)
}
x <- 1:3; y <- 4:6; z <- 7:9
mat(x, y, z)
mat(x, y, z, rows = F)
mat(x, y, z, 1:4)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
corr
?match.arg
?R2
?caret::R2
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list = ls())
devtools::load_all(".")
devtools::load_all(".")
install.packages(c("AICcmodavg", "BB", "BH", "C50", "car", "caret", "catdata", "deldir", "DEoptimR", "deSolve", "diptest", "doBy", "Ecfun", "emdbook", "entropy", "fdrtool", "GPArotation", "grpreg", "gWidgetsRGtk2", "highr", "httpuv", "jsonlite", "knitr", "lava", "magrittr", "mvtnorm", "party", "plotmo", "plotrix", "R6", "Rcpp11", "RcppArmadillo", "RCurl", "rFerns", "rjags", "rminer", "rpart.plot", "RSQLite", "sda", "setRNG", "sp", "texreg", "VGAM", "VGAMdata"))
install.packages("rticles")
library(devtools)
install_github("rstudio/rticles")
