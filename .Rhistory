p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
# Train a model across all the training data and plot the variable importance
rf <- randomForest(x = extractFeatures(train),
y = train$count,
xtest = extractFeatures(test),
ytest = test$count,
ntree = 100, importance = TRUE)
# Extract feature importance scores
imp <- importance(rf, type = 1)
feature_importance <- data.frame(feature = row.names(imp),
importance = imp[, 1])
# Plot random forest feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
rf
rf$test
test$count
plot(rf)
# Train a model across all the training data and plot the variable importance
rf <- randomForest(x = extractFeatures(train), y = train$count, ntree = 500,
importance = TRUE)
plot(rf)
rf
# Plot feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
theme_light(base_size = 20) +
xlab("Importance") +
ylab("") +
coord_flip() +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
# Plot feature importance scores
p <- ggplot(feature_importance,
aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "#53cfff") +
coord_flip() +
theme_light(base_size = 20) +
ylab("Importance") +
xlab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title = element_text(size = 18))
p
test
head(train$hour)
unique(year(ymd_hms(test$datetime)))
unique(month(ymd_hms(test$datetime)))
testLocs
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs <- year(ymd_hms(test$datetime)) == i_year &
month(ymd_hms(test$datetime)) == i_month
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
i_year
i_month
extractFeatures(train[trainLocs, ])
train[trainLocs, "count"],
train[trainLocs, "count"]
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, "count"], ntree = 100)
train[trainLocs, ]$count
for (i_year in unique(year(ymd_hms(test$datetime)))) {
for (i_month in unique(month(ymd_hms(test$datetime)))) {
cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
testLocs <- year(ymd_hms(test$datetime)) == i_year &
month(ymd_hms(test$datetime)) == i_month
testSubset <- test[testLocs, ]
trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
rf <- randomForest(x = extractFeatures(train[trainLocs, ]),
y = train[trainLocs, ]$count, ntree = 100)
submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
}
}
submission
submission %?% tbl_df
submission %>% tbl_df
ts.plot(submission)
ts.plot(submission$count)
ts.plot(submission$count[1:1000])
ts.plot(submission$count[1:100])
ts.plot(submission$count)
library(misc)
clip <- function(x, interval, ...) {
UseMethod("clip")
}
#' @export
clip.numeric <- function(x, ...) {
x[x < interval[1L]] <- interval[1L]
x[x > interval[2L]] <- interval[2L]
x
}
clip(rnorm(10), interval = c(0, 1))
#' @export
clip.numeric <- function(x, interval, ...) {
x[x < interval[1L]] <- interval[1L]
x[x > interval[2L]] <- interval[2L]
x
}
clip(rnorm(10), interval = c(0, 1))
#' @export
clip.matrix <- function(x, interval, ...) {
x[x < interval[1L]] <- interval[1L]
x[x > interval[2L]] <- interval[2L]
x
}
clip(matrix(rnorm(25), 5, 5), interval = c(0, 1))
a <- array(rnorm(27), c(3, 3, 3))
a
#' @export
clip.array <- function(x, interval, ...) {
x[x < interval[1L]] <- interval[1L]
x[x > interval[2L]] <- interval[2L]
x
}
clip(a, interval = c(0, 1))
a
source('~/Desktop/Dropbox/devel/misc/R/clip.R', echo=TRUE)
link <- paste("http://archive.ics.uci.edu/ml/machine-learning",
"databases/adult/adult.data", sep = "-")
census <- read.csv(link, header = FALSE)
head(census)
# Add column names
names(census) <- c("age",
"workclass",
"fnlwgt",
"education",
"education-num",
"marital-status",
"occupation",
"relationship",
"race",
"sex",
"capital-gain",
"capital-loss",
"hours-per-week",
"native-country")
# Required libraries
library(dplyr)
# Read in raw data
census <- read.csv(paste("http://archive.ics.uci.edu/ml/machine-learning",
"databases/adult/adult.data", sep = "-"),
header = FALSE) %>% tbl_df
# Add column names
names(census) <- c("age",
"workclass",
"fnlwgt",
"education",
"education-num",
"marital-status",
"occupation",
"relationship",
"race",
"sex",
"capital-gain",
"capital-loss",
"hours-per-week",
"native-country")
census
census
census[, "NA"]
census <- read.csv(paste("http://archive.ics.uci.edu/ml/machine-learning",
"databases/adult/adult.data", sep = "-"),
header = FALSE) %>% tbl_df
census
census %>% select(V12:V15)
names(census) <- c("age",
"workclass",
"fnlwgt",
"education",
"education-num",
"marital-status",
"occupation",
"relationship",
"race",
"sex",
"capital-gain",
"capital-loss",
"hours-per-week",
"native-country",
"income")
census$income
file.choose()
?write.csv
write.csv(census, file = "/home/w108bmg/Desktop/CensusIncome.csv",
row.names = FALSE)
census
dim(census)
sample(c(0, 1), prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = 1, prob = c(0.05,0.95))
sample(c(0, 1), size = length(x), replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
sample(c(0, 1), size = 10, replace = TRUE, prob = c(0.05,0.95))
census
strsplit("a-b", "-")
strsplit("a-b", "-")[[1]]
paste0(strsplit("a-b", "-")[[1]])
paste0(strsplit("a-b", "-")[[1]], collapse = " ")
paste0(strsplit("afb", "-")[[1]], collapse = " ")
paste0(strsplit(c("afb", "a-b"), "-")[[1]], collapse = " ")
?strsplit
sub("-", " ", c("abc", "a-b"))
census2 <- census
# Age
set.seed(1)
id <- sample(nrow(census2), size = 100)
census2[id, "age"] <- "."
census2$age
sort(unique(census2$age))
table(unique(census2$age))
table(census2$age)
set.seed(2)
id <- sample(nrow(census2), size = 500)
census2[id, "workclass"] <- sub("-", " ", census2[id, "workclass"])
census2[id, "workclass"] <- sub("-", " ", census2[id, ]$workclass)
# Copy data
census2 <- census
# Age
set.seed(1)
id <- sample(nrow(census2), size = 100)
census2[id, "age"] <- "."
# Workclass (remove hyphens)
set.seed(2)
id <- sample(nrow(census2), size = 500)
census2[id, "workclass"] <- sub("-", " ", census2[id, ]$workclass)
# Copy data
census2 <- census
# Age
set.seed(1)
id <- sample(nrow(census2), size = 100)
census2[id, ]$age <- "."
# Workclass (remove hyphens)
set.seed(2)
id <- sample(nrow(census2), size = 500)
census2[id, ]workclass <- sub("-", " ", census2[id, ]$workclass)
census2[id, ]$workclass <- sub("-", " ", census2[id, ]$workclass)
table(census2$workclass)
id <- sample(nrow(census2), size = 500)
census2[id, ]$workclass <- sub("-", " ", census2[id, ]$workclass)
table(census2$workclass)
class(census2[id, ]$workclass)
census2[id, ]$workclass <- sub("-", " ", as.character(census2[id, ]$workclass))
table(census2$workclass)
id <- sample(nrow(census2), size = 500)
census2[id, ]$workclass <- sub("-", " ", as.character(census2[id, ]$workclass))
table(census2$workclass)
?unique
?nlevels
?uunique
?unique
unique(cars)
length(unique(cars))
?length
is.vector(cars)
is.vector(1:4)
is.vector
?is.vector
source('~/Desktop/Dropbox/devel/misc/R/nunique.R', echo=TRUE)
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 100, replace=T))
nunique(sample(1:10, size = 20, replace=T))
nunique(sample(1:10, size = 20, replace=T))
nunique(sample(1:10, size = 20, replace=T))
nunique(sample(1:10, size = 20, replace=T))
nunique(sample(1:10, size = 20, replace=T))
nunique(cars)
dim(cars)
duplicated(cars)
cars[duplicated(cars), ]
cars
?median
na.rm
na.omit
inrange <- function(x, lower, upper) {
ifelse(x > lower & x < upper, 1, 0)
}
inrange(runif(10, 0, 1))
inrange(runif(10), 0, 1)
inrange(runif(10), 0, 0.5)
is.numeric(1L)
inrange <- function(x, lower, upper, strict = TRUE) {
stopifnot(is.numeric(x) || is.numeric(lower) || is.numeric(upper) ||
is.logical(strict))
if (strict) {
ifelse(x > lower & x < upper, 1, 0)
} else {
ifelse(x >= lower & x <= upper, 1, 0)
}
}
inrange(rnorm(100), -3, 3)
inrange(rnorm(10000), -3, 3)
mean(inrange(rnorm(10000), -3, 3))
mean(inrange(rnorm(1e+06), -3, 3))
mean(inrange(rnorm(1e+06), -3, 3))
mean(inrange(rnorm(1e+06), -3, 3))
mean(inrange(rnorm(1e+06), -3, 3))
inrange(3, 0, 1)
?min
?table
?which.maxx
?which.max
co
col
?col
?plot
colorWheel <- function(str, cex = 0.75) {
cols <- colors()[grep(str, colors())]
pie(rep(1, length(cols)), labels = cols, col = cols, cex = cex)
cols
}
colorWheel("green")
colorWheel("green", 1)
colors()
colorWheel("blue", 1)
colorWheel("purple", 1)
colorWheel("purple")
colorWheel("springgreen")
colorWheel <- function(str, ...) {
cols <- colors()[grep(str, colors())]
pie(rep(1, length(cols)), labels = cols, col = cols, ...)
cols
}
colorWheel("springgreen")
colorWheel("purple")
colorWheel("blue")
colorWheel("blue", cex = 0.5)
colorWheel("blue", cex = 0.75)
?pie
?pie
?colors
?grep
?as.factor
?abs
library(grid)
?pushViewport
?grid.layout
library(misc)
?hypot
library(misc)
?hypot
library(misc)
?deg2rad
library(misc)
library(misc)
library(misc)
library(misc)
library(misc)
library(misc)
library(misc)
library(misc)
?interval
?interval
library(misc)
txt <- "fortify.randomForest: no visible global function definition for
‘outlier’
fortify.randomForest: no visible binding for global variable
‘MeanDecreaseAccuracy’
fortify.randomForest: no visible binding for global variable
‘MeanDecreaseGini’
ggErrorPlot: no visible global function definition for ‘aes’
ggErrorPlot: no visible binding for global variable ‘ntree’
ggErrorPlot: no visible binding for global variable ‘error’
ggErrorPlot: no visible binding for global variable ‘mse’
ggErrorPlot: no visible global function definition for ‘element_text’
ggErrorPlot: no visible global function definition for ‘element_blank’
ggMarginPlot: no visible global function definition for ‘aes’
ggMarginPlot: no visible binding for global variable ‘index’
ggMarginPlot: no visible global function definition for ‘geom_point’
ggMarginPlot: no visible global function definition for ‘element_text’
ggMarginPlot: no visible global function definition for ‘element_blank’
ggParallelCoordinatePlot: no visible global function definition for
‘aes’
ggParallelCoordinatePlot: no visible binding for global variable
‘feature’
ggParallelCoordinatePlot: no visible binding for global variable
‘score’
ggParallelCoordinatePlot: no visible global function definition for
‘element_text’
ggParallelCoordinatePlot: no visible global function definition for
‘element_blank’
ggPartialPlot: no visible global function definition for ‘aes’
ggPartialPlot: no visible binding for global variable ‘x’
ggPartialPlot: no visible binding for global variable ‘y’
ggPartialPlot: no visible global function definition for ‘stat_smooth’
ggPartialPlot: no visible global function definition for ‘element_text’
ggProximityPlot: no visible global function definition for ‘aes’
ggProximityPlot: no visible binding for global variable ‘obs1’
ggProximityPlot: no visible binding for global variable ‘obs2’
ggProximityPlot: no visible global function definition for ‘geom_tile’
ggProximityPlot: no visible binding for global variable ‘proximity’
ggProximityPlot: no visible global function definition for
‘scale_fill_gradient’
ggProximityPlot: no visible binding for global variable ‘base_size’
ggProximityPlot: no visible global function definition for
‘scale_x_discrete’
ggProximityPlot: no visible global function definition for
‘scale_y_discrete’
ggProximityPlot: no visible global function definition for
‘element_text’
ggProximityPlot: no visible global function definition for
‘element_blank’
ggProximityPlot: no visible binding for global variable ‘dim1’
ggProximityPlot: no visible binding for global variable ‘dim2’
ggProximityPlot: no visible global function definition for ‘geom_point’
ggProximityPlot: no visible binding for global variable ‘obs’
ggProximityPlot: no visible binding for global variable ‘outlyingness’
ggProximityPlot: no visible global function definition for ‘geom_bar’
ggProximityPlot: no visible binding for global variable ‘refline’
ggProximityPlot: no visible global function definition for ‘geom_hline’
ggVarImpPlot: no visible global function definition for ‘aes’
ggVarImpPlot: no visible binding for global variable ‘feature’
ggVarImpPlot: no visible global function definition for ‘geom_bar’
ggVarImpPlot: no visible global function definition for ‘coord_flip’
ggVarImpPlot: no visible global function definition for ‘element_text’"
txt2 <- strsplit(txt, " ")[[1]]
txt3 <- txt2[grepl("‘*’", txt2)]
txt4 <- sub("’.*", "", sub(".*‘", "", txt3))
paste(sort(unique(txt4)), collapse = " ")
dim1
?refline
library(misc)
library(misc)
?reorder
?ggplot2::reorder
?NROW
NCOL()
NCOL
NROW
